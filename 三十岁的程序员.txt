古人说三十而立，到了而立之年的程序员充满了迷惘，这次我们聊一聊30岁的程序员。

其实不管是程序员还是其他岗位，到了30岁基本都已经是公司的中坚力量。30岁的程序员度过了最初的学习阶段，基本形成了自己的代码风格，是时候开始考虑后面的路该怎么走了。

有人说30岁了为什么还是程序员，我这里指的是广义的程序员，在我的理解中，不管是开发工程师、架构师、技术总监、研究员，本质上都是程序员，只是大家的侧重点，分工不同而已。

大部分人23岁左右大学毕业，30岁的时候基本已经有6,7年工作经验了，这样的工作经历已经能符合作为一个架构师的基本条件，不少人也已经在架构师的岗位上为公司添砖加瓦；也有不少人已经成为了team leader，带着团队；我的几个朋友，在30岁的时候已经是一家公司的CTO，管理着公司整个技术团队。

说到CTO，我简单的谈一下我对CTO的理解，CTO，是首席技术官的意思，国内也称作技术总监，技术负责人。从字面解释来看，是一个技术和管理并重的岗位，缺一不可，是一个公司技术的最高负责人。CTO可以不写代码，可以不搭框架，但是一定要懂技术。懂技术的意思不仅仅是做到团队的成员无法忽悠你，更要做到当团队遇到一个技术问题束手无策的时候，你可以站出来解决，因为你是公司整个技术团队的底牌，同时也是第一责任人。

在我的理解里，CEO是一个公司最强的BD或者商务，CFO是公司最强的财务，CHO是公司最好的HR，那CTO就是一个公司最强的程序员。

所以，朋友们，有一天你们坐上了CTO的位置，请千万千万别把技术丢下，技术永远是我们程序员安身立命的本钱。

有点扯远了，到了30岁，基本上都已经结婚了，大部分也都有了小孩，生活的压力慢慢大了起来，在公司因为职位的上升，承担的压力也慢慢大了起来，很容易就会出现焦虑，迷惘，我以我的亲身经历给大家一些建议：

#### 选好自己要走的路
![程序员四象限](https://mmbiz.qpic.cn/mmbiz_png/4B0MSaUkcQibm4ozRuUajaMwEHsmd3UxWRxSw5zMAVLkMJPTfsqfAMj0gbtQ4u5SIIRPC0fWzU8Q4kyfKlkCwrg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)

我觉得程序员发展大体上来说就是两条路，一条是往纯技术方向走，一条是往技术管理方向走。

纯技术的路大多数人看起来不好走，因为除了国内一些大型互联网和技术公司外，大部分的中小型公司并没有纯技术的职业发展路径，所以想要往纯技术的发展的同学，建议你们去大公司，因为大公司有完备的科研环境和科研预算。

技术管理的路应该是大多数人的选择，其实我一直不太明白为什么国内有很多关于“技术就是吃年轻饭，30岁或者35岁以上就写不了代码了，不转管理就转行”的说法。我们放眼国外，很多开源框架的作者，很多技术社区的活跃者，年龄都在40岁左右。其实我觉得30岁以前是一个程序员学习和打基础的时间，30-50岁才是一个程序员真正出成就的时候。因为这时候的程序员慢慢对技术有了自己的理解，形成了自己的风格，经验的积累，技术的积累也足以支撑你完成你想做的事。

说回技术管理，有人觉得管理很简单，把任务分解、安排好就可以了。兄弟，你错了，真正的做好管理，其难度不会比做好技术低多少。技术管理要做的事情包括，沟通、协调、需求管理、商业逻辑及商业模式的了解、团队管理、风险管理等等。光是沟通和协调就不是轻松的事了。

所以我们选择去什么公司，做什么岗位，拿多少薪水，都是和你未来的路息息相关，请帮自己做好规划，对自己负责！

#### 30岁的我应该掌握哪些技术

这里我想说一下，我个人理解中30岁的程序员应该掌握的技术。避免出现下述的事情，这是我朋友和我说的一个真事。

我朋友有一次去面试，面试官问了一个问题
```java
@Scheduled(fixedDelay=1000)
public Boolean uploadFile(File file) {
    doSomeThing...
}
```

上面这段代码，为什么没有启动后每隔一秒执行？
我朋友看了说，因为你报错了，所以才没有执行。
面试官说，不会报错啊，这代码哪里有错？
我朋友说，你一个定时任务，哪来的参数和返回值，谁给你传参数，返回值返回给谁？spring源码里，执行@Scheduled注解时会先判断一下返回值和参数，如果有参数或者会报一个错。
面试官说，噢，原来是这样啊。

我朋友才知道这原来是面试官碰到的问题，并且在我面前鄙视了那个面试官好长时间。

我觉得，30岁的程序员应该掌握的技术简单列举一部分：

java类：

java的源码你应该看的差不多了吧。

io 
- nio\bio\aio这些你应该都用过并知道区别

thread 
- synchronized和lock你都应该用过，并且不会因为错误的使用lock造成系统崩溃。
- volatile关键字的使用场景你应该明白。
- threadLocal的缺点请你谨记。
- threadPool各种类型的线程池你都应该熟悉，并且能根据使用场景选择合适的线程池。
- concurrent并发包里的各种工具你应该熟悉且能根据使用场景选择合适的工具。
       
jvm    
- 堆栈信息你应该非常清楚。
- GC的原理以及各种策略你应该熟悉。
- 对于各种类型的OOM错误，你的解决方案不应该只是调大内存。
- 熟练使用jstack,jstat,jvisualvm等常用的JDK工具。     

框架类：

Spring   
- Spring和SpringBoot，源码你应该需要看一下，各种配置你应该要非常熟悉。

Mybatis  
- 和Spring一样。
分布式    
- 配置中心的开源框架你至少要有一个熟悉吧，如：diamond、disconf、Apollo、Spring conf等。
- RPC框架你至少要有一个熟悉吧，如:dubbo、Thrift、gRPC等。
- 注册中心你至少要有一个熟悉吧，如：Zookeeper、Eureka等。

现在有很多人对于框架本着只要熟练使用，不用深入了解的想法，但这样只会把你变成一个熟练的技术工人。

#### 30岁以后的怎么走
阿里近几年来对开源社区的贡献大家有目共睹，从15年底阿里把JStorm捐赠给Apache开始，我觉得，阿里已经从一家电商公司变成了一家科技公司。大家争先恐后的想要挤进阿里，但是阿里的面试是有名的打破砂锅问到底。举个栗子（这次不用阿姨了）：

面试官问：请简单介绍一下HashMap。
应聘者回答：HashMap是由链表和数组的结构组成...并且是线程不安全的。
面试官问：那有没有线程安全的HashMap呢。
应聘者回答：JDK1.5之前使用Hashtable和Collections.synchronizedMap，JDK1.5之后使用concurrent包里的concurrentHashMap。
面试官问：concurrentHashMap是怎么实现线程安全的。
应聘者回答：ConcurrentHashMap将数据分别放到多个Segment中，每一个Segment都拥有一个锁，当进行写操作时，只需要锁定一个Segment，而其它Segment中的数据是可以访问的。
面试官问：我觉得concurrentHashMap性能还不是太好，有没有不用Segment的实现方式。
应聘者回答：在JDK1.8中，取消了segments字段，将原先table数组＋单向链表的数据结构，变更为table数组＋单向链表＋红黑树的结构，提高了性能。
面试官问：使用红黑树结构是让concurrentHashMap的性能提成了1/3左右，那如果让你来实现，有没有更高性能的方案。
应聘者，卒。。。。

所以面试官会先从广度来了解你的技术能力的范围，然后找几个问题来查看你技术能力的深度，从而判断你的技术能力。

所以需要尽量提升你技术能力的深度和广度，如何提升呢？我建议是接触大用户量、高并发的系统，因为大用户量的系统就意味着高并发、高可用、高性能，在优化系统或者解决问题的时候，你可以学到很多的东西。

其次，我觉得应该给自己定一个小目标，比如我的小目标是在35岁之前写一个开源框架，在github上至少有500+的fork。

最后我觉得是需要提高自己的影响力，构建自己的品牌。

>在活跃的技术社区混个脸熟

>写一个开源框架并让更多的人使用

>拥有一个技术博客或者公众号，把自己的心得分享出去

以上这些都是很好的提高自己影响力的方法。
